name: Create new release

on:
  push:
    branches: [ master ]
    paths: ['Directory.Build.props']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.402
    - name: Install dependencies
      run: |
        dotnet restore
        sudo apt-get install -y zip unzip tar libxml2-utils
    - name: Set env variables
      run: |
        APP_VERSION=`xmllint --xpath "/Project/PropertyGroup/Version/text()" Directory.Build.props`
        echo "::set-env name=APP_VERSION::$APP_VERSION"
    - name: Publish Binaries
      run: |
        mkdir -p __ga
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r linux-x64 -c Release -o __ga/linux-x64 --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r linux-musl-x64 -c Release -o __ga/linux-musl-x64 --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r linux-arm -c Release -o __ga/linux-arm --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r linux-arm64 -c Release -o __ga/linux-arm64 --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r win-x64 -c Release -o __ga/win-x64 --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r win-x86 -c Release -o __ga/win-x86 --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r win-arm -c Release -o __ga/win-arm --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r win-arm64 -c Release -o __ga/win-arm64 --self-contained
        dotnet publish ./src/DirSync.csproj /p:AssemblyVersion=${{ env.APP_VERSION }} /p:DebugType=None -p:PublishTrimmed=true -p:PublishSingleFile=true -r osx-x64 -c Release -o __ga/osx-x64 --self-contained
    - name: Package Binaries
      run: |
        cd __ga
        sudo tar -cvzf linux-x64.tar.gz --directory=linux-x64 .
        sudo tar -cvzf linux-musl-x64.tar.gz --directory=linux-musl-x64 .
        sudo tar -cvzf linux-arm.tar.gz --directory=linux-arm .
        sudo tar -cvzf linux-arm64.tar.gz --directory=linux-arm64 .
        sudo zip -r -j win-x64.zip win-x64/
        sudo zip -r -j win-x86.zip win-x86/
        sudo zip -r -j win-arm.zip win-arm/
        sudo zip -r -j win-arm64.zip win-arm64/
        sudo zip -r -j osx-x64.zip osx-x64/
        cd ..
    - uses: actions/create-release@v1
      name: Create GitHub release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.APP_VERSION }}
        release_name: Release ${{ env.APP_VERSION }}
        body_path: ./doc/release/${{ env.APP_VERSION }}.md
        draft: false
        prerelease: false
    - uses: actions/upload-release-asset@v1
      name: Upload asset for osx-x64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/osx-x64.zip
        asset_name: dirsync-osx-x64.zip
        asset_content_type: application/zip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for win-x86
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/win-x86.zip
        asset_name: dirsync-win-x86.zip
        asset_content_type: application/zip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for win-x64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/win-x64.zip
        asset_name: dirsync-win-x64.zip
        asset_content_type: application/zip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for win-arm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/win-arm.zip
        asset_name: dirsync-win-arm.zip
        asset_content_type: application/zip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for win-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/win-arm64.zip
        asset_name: dirsync-win-arm64.zip
        asset_content_type: application/zip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for linux-x64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/linux-x64.tar.gz
        asset_name: dirsync-linux-x64.tar.gz
        asset_content_type: application/gzip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for linux-musl-x64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/linux-musl-x64.tar.gz
        asset_name: dirsync-linux-musl-x64.tar.gz
        asset_content_type: application/gzip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for linux-arm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/linux-arm.tar.gz
        asset_name: dirsync-linux-arm.tar.gz
        asset_content_type: application/gzip
    - uses: actions/upload-release-asset@v1
      name: Upload asset for linux-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: __ga/linux-arm64.tar.gz
        asset_name: dirsync-linux-arm64.tar.gz
        asset_content_type: application/gzip
